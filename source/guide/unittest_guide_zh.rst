单元测试指南
==============================

单元测试的意义
---------------------

在软件工程领域，单元测试是一种测试方法，通过这种方法，对一个或多个计算机程序模块的源代码集的各个单元以及相关的控制数据、使用程序和操作程序进行测试，以确定它们是否能正确运行（摘自`维基百科 - Unit testing <https://en.wikipedia.org/wiki/Unit_testing>`_）。

在实际开发中，单元测试的意义如下：

* 在代码被更新时，可以通过运行单元测试来确保不会出现回归错误。
* 通过细粒度的单元测试设计，可以在单元测试时快速且精确地定位到错误源头。
* 将单元测试与代码覆盖率结合，可以确保所有代码和分支均受到过测试。
* 在发现了Bug后，可以将可复现Bug的测试用例添加至单元测试，让代码功能的完善性不断提高。
* 另外很重要的一点——**对于一个模块而言，想要了解其功能和使用方式，阅读单元测试代码也是非常高效的一种手段**。



测试类型
---------------------

在DI-engine项目中，我们将单元测试分为如下的若干部分：

* ``unittest``——为一般意义上的功能性单元测试，确保工程代码功能正常，算法代码在简单用例上能实现收敛。
* ``algotest``——为针对算法代码的单元测试，确保算法代码在特定的用例上能满足使用需求。
* ``cudatest``——为针对依赖于CUDA的特性的单元测试，确保此类特性在有CUDA的运行环境上功能正常。
* ``envpooltest``——为针对依赖于envpool高性能并行计算的特性的单元测试，确保此类特性功能正常。
* ``platformtest``——为针对跨平台代码的单元测试，确保DI-engine的核心功能在MacOS和Windows平台上依然可以正常运行。
* ``benchmark``——为针对算法或架构的性能测试，主要针对相关内容进行测速，确保其性能满足要求。




如何编写单元测试
---------------------

- unittest（怎么定义，怎么写）
- pytest的用法介绍（把之前的部分也合过来） https://di-engine-docs.readthedocs.io/zh_CN/latest/guide/warmup_zh.html#pytest



如何进行单元测试
---------------------

- make快速启动
（这里是单元测试指南部分。）


